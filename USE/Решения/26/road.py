"""
На автомагистрали из столицы на курорт некоторое количество дорожных
бригад ремонтируют каждая свой участок дороги. Один и тот же метр дороги
при этом не может ремонтироваться двумя разными бригадами. Каждая бригада ремонтирует один участок, начинающийся на целом количестве метров от
столицы и имеющий в длину какое-то целое количество метров. Комфортным
считается участок дороги длиной не менее M метров, который не ремонтируется. Автолюбитель решил узнать, какое количество участков дороги он может
проехать с комфортом и какова длина наименьшего такого участка. Общая длина всей автомагистрали L метров.
Входные данные.
В первой строке входного файла road.txt находятся три числа через пробел: число L — общая длина автомагистрали в метрах (натуральное число, не
превышающее 109), число M — минимальная длина комфортного участка дороги в метрах (натуральное число,
не превышающее 10 000), число N — количество дорожных бригад, работающих на автомагистрали (натуральное число,
не превышающее 10 000). В следующих N строках находится по два числа через
пробел. Первое число — расстояние (в метрах) от начала автомагистрали, на
котором начинается участок, ремонтируемый дорожной бригадой (натуральное число, не превышающее 109).
Второе число — длина (в метрах) этого участка (натуральное число, не превышающее 105).
Запишите в ответе два числа: количество комфортных участков дороги и минимальную длину (в метрах) комфортного участка.
Пример входного файла:
1200 100 3
430 300
200 150
900 50
При таких исходных данных имеется всего четыре неремонтируемых участка:
от 0 до 200 (длиной 200),
от 350 до 430 (длиной 80),
от 730 до 900 (длиной 170) и
от 950 до 1200 (длиной 250).
Среди них комфортными являются участки длины 200, 170 и 250. Поэтому
ответ для приведённого примера:
3 170
Пример имеет иллюстративный характер. Для выполнения задания используйте данные из прилагаемого файла.
"""


def read_data(fname):
    with open(fname, "r") as file:
        lines = file.readlines()
    L, M, N = map(int, lines[0].split())
    repSeg = []
    for line in lines[1 : N + 1]:
        start, length = map(int, line.split())
        repSeg.append((start, start + length))
    return L, M, repSeg


def findComableSeg(L, M, repSeg):
    repSeg.sort()
    result = []
    lastReped = 0

    for start, end in repSeg:
        if start > lastReped:
            free_start = lastReped
            free_end = start
            result.append((free_start, free_end))
        lastReped = max(lastReped, end)

    if lastReped < L:
        result.append((lastReped, L))

    ComableSeg = [(start, end) for start, end in result if end - start >= M]
    lengths = [end - start for start, end in ComableSeg]

    if lengths:
        return len(ComableSeg), min(lengths)
    return 0, 0


def main():
    fname = "USE/26/road.txt"
    L, M, repSeg = read_data(fname)
    count, min_length = findComableSeg(L, M, repSeg)
    print(count, min_length)  # ans = [ 577 1501 ]


if __name__ == "__main__":
    main()
