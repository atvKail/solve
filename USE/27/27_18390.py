"""
Задание 27 (№18390).  p.s. КЕГЭ 5 вариант Шастина и Бахтиева 24/25 года.
(Л. Шастин) Популярная компания по доставке продуктов «Быстрокат»
расширяется и хочет открыть новые филиалы в двух густонаселенных районах города.
Для открытия отдела логистам необходимо выбрать самую подходящую геолокацию для оптимизации организации процессов по координации и доставке товаров,
для чего им нужно проанализировать множество жилых единиц (геопозиций). Каждый район состоит из нескольких микрорайонов,
включающих в себя некоторое количество геопозиций. Известно, что каждый микрорайон характеризуется тем,
что любая из его геопозиций удалена от любой геопозиции из других микрорайонов хотя бы на R y.e. (условных единиц).
Для анализа данных используется предоставленный набор вещественных точек (геопозиций), размещенных на декартовой оси координат.
Они характеризуют все геопозиции конкретного района, который представляет собой квадрат размером 10 у.е. (условных единиц).
С целью определить оптимальную геолокацию для открытия филиала логисты вычисляют медоид (райцентр) каждого микрорайона,
который определяется как такая геопозиция внутри одного микрорайона,
суммарное расстояние от которой до всех других геопозиций этого же микрорайона минимально.
Затем специалисты определяют конечный медоид, опираясь на данные о расположении ранее найденных медоидов,
- такую геопозицию, суммарное расстояние от которой до всех медоидов минимально.
Именно в этой геопозиции и будет затем открыт новый филиал. При проведении расчетов также исключаются аномальные геопозиции,
случайно попавшие в представленный набор данных. Они определяются как точки,
расстояние от которых до любой другой точки в наборе данных превышает К у.е. (условных единиц).
Метрикой расстояния между двумя геопозициями (точками)
A(x1, y1) и B(x2, y2) на плоскости является формула Евклида: d(A, B) = sqrt((x2 - x1)^2 + (y2 - y1)^2).
В файле А хранятся данные обо всех геопозициях первого района.
В первой строке записаны значения R и К для этого района.
В каждой из следующих строк записана информация о расположении в районе одной геопозиции: сначала координата х, затем координата у.
Значения даны в условных единицах, которые представлены вещественными числами. Известно, что количество геопозиций не превышает 2000.
В файле Б хранятся данные обо всех геопозициях второго района. В первой строке записаны значения R и К для этого района.
Известно, что количество геопозиций не превышает 30 000. Структура хранения информации о звездах в файле Б аналогична файлу А.
Для каждого файла определите геопозицию, в которой будет открыт филиал.
В ответе запишите четыре числа: в первой строке сначала целую часть произведения координаты х этой геопозиции на 10000,
затем целую часть произведения координаты у этой геопозиции на 10000 для файла А, во второй строке - аналогичные данные для файла Б.
Возможные данные одного из файлов иллюстрированы графиком. Внимание! График приведён в иллюстративных целях для произвольных значений,
не имеющих отношения к заданию. Для выполнения задания используйте данные из прилагаемого файла.

https://kompege.ru/files/zK2SJjOrh1.xlsx   <- B, файл xlsx, файл формата txt находятся в той же папке, что и эта программа
https://kompege.ru/files/fG9xIZAz2A.xlsx   <- A, файл xlsx, файл формата txt находятся в той же папке, что и эта программа

Теория:
Медоид (в кластерном анализе) — объект, принадлежащий набору данных или кластеру,
различие (например, по координатам) которого с другими объектами в наборе данных или кластере минимально.
Медоиды близки по смыслу центроидам, но в отличие от них, !!!являются объектом, принадлежащим кластеру!!!,
и как правило используются в тех случаях, когда невозможно вычислить средние координаты или центр масс кластера.

Типичное применение медоидов — алгоритм кластеризации k-medoids(https://en.wikipedia.org/wiki/K-medoids), который похож на алгоритм k-средних,
но в отличие от него на каждой итерации ищет центры кластеров не как среднее точек, а как медоиды точек.
То есть, центр кластера должен обязательно являться одной из его точек.
"""

import math
import random


def read_data(file_name):
    """Считывает данные из файла."""
    with open(file_name, "r") as file:
        lines = file.readlines()
    R, K = map(float, lines[0].replace(",", ".").split())
    points = [tuple(map(float, line.replace(",", ".").split())) for line in lines[1:]]
    return R, K, points


def euclidean_distance(p1, p2):
    """Вычисляет евклидово расстояние между двумя точками."""
    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)


def remove_anomalies(points, K):
    """Удаляет аномальные точки, расстояние до ближайшей точки которых > K."""
    filtered_points = []
    for i, point in enumerate(points):
        distances = [
            euclidean_distance(point, other) for j, other in enumerate(points) if i != j
        ]
        if distances and min(distances) <= K:
            filtered_points.append(point)
    return filtered_points


def k_medoids(points, k):
    """Алгоритм k-medoids для нахождения медоидов."""
    medoids = random.sample(points, k)  # Шаг 1: случайный выбор начальных медоидов
    while True:
        clusters = {medoid: [] for medoid in medoids}

        # Шаг 2: Назначение точек ближайшему медоиду
        for point in points:
            closest_medoid = min(
                medoids, key=lambda medoid: euclidean_distance(point, medoid)
            )
            clusters[closest_medoid].append(point)

        new_medoids = []
        # Шаг 3: Пересчет медоидов
        for medoid, cluster_points in clusters.items():
            best_medoid = min(
                cluster_points,
                key=lambda candidate: sum(
                    euclidean_distance(candidate, other) for other in cluster_points
                ),
            )
            new_medoids.append(best_medoid)

        # Если медоиды не изменились, выход
        if set(new_medoids) == set(medoids):
            break
        medoids = new_medoids
    print(medoids)
    return medoids


def find_final_medoid(medoids):
    """Находит конечный медоид среди всех медоидов микрорайонов."""
    return min(
        medoids,
        key=lambda medoid: sum(euclidean_distance(medoid, other) for other in medoids),
    )


def process_file(file_name):
    """Обрабатывает файл и находит оптимальную геопозицию для филиала."""
    R, K, points = read_data(file_name)
    points = remove_anomalies(points, K)
    medoids = k_medoids(points, k=1)  # Найти медоид для района
    final_medoid = find_final_medoid(medoids)
    x, y = final_medoid
    return int(x * 10000), int(y * 10000)


if __name__ == "__main__":
    # Обработка файлов A и B
    result_a_x, result_a_y = process_file("USE/27/27_A_18390.txt")
    result_b_x, result_b_y = process_file("USE/27/27_B_18390.txt")

    # Вывод результата
    print(result_a_x, result_a_y)
    print(result_b_x, result_b_y)


"""
После, примерно, 30 секунд вывело ответы:
33923 51105
33732 37221

Также эти ответы сошлись с ответами на КЕГЭ
"""
